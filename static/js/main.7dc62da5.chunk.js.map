{"version":3,"sources":["MortgageSummary.js","MortgageCalculator.js","MortgageCalculation.js","App.js","serviceWorker.js","index.js"],"names":["MortgageSummary","formatCurrency","currencyValue","Intl","NumberFormat","currency","minimumFractionDigits","maximumFractionDigits","format","textAlignRight","textAlign","items","this","props","data","amortization","map","amortizationPeriod","index","principalPercent","principalMonth","interestMonth","interestPerecent","react_default","a","createElement","key","principalTotal","ProgressBar","col","striped","variant","now","label","interestTotal","balance","Card","Body","Title","Table","bordered","responsive","style","numberOfPaymentsTerm","numberOfPaymentsAmortizationPeriod","mortgagePayment","principalTotalTerm","interestTotalTerm","termBalance","totalCostTerm","totalCost","size","minWidth","React","Component","MortgageCalculator","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","queryString","require","history","createBrowserHistory","location","urlParameters","parse","search","state","mortgageAmount","interestRate","paymentFrequency","term","handleChangeMortgageAmount","bind","assertThisInitialized","handleChangeInterestRate","handleChangeAmortizationPeriod","handleChangePaymentFrequency","handleChangeTerm","handleSubmit","event","setState","target","value","push","pathname","stringify","preventDefault","mortgage","computedInterest","Math","pow","isTerm","year","month","calculateMortgage","Form","onSubmit","Group","as","Row","controlId","Label","column","sm","Col","InputGroup","Prepend","Text","Control","type","onChange","step","Append","Button","src_MortgageSummary","App","Navbar","bg","Brand","href","Container","id","fluid","CardDeck","src_MortgageCalculator","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7dc62da5.chunk.js","sourcesContent":["import React from 'react';\nimport { Card, Table, ProgressBar } from 'react-bootstrap';\n\nclass MortgageSummary extends React.Component {\n    render() {\n        const formatCurrency = (currencyValue) => {\n            return (\n                new Intl.NumberFormat('en-CA', { \n                    currency: \"CAN\",\n                    minimumFractionDigits: 2, \n                    maximumFractionDigits: 2 \n                  }).format(currencyValue)\n            );\n        };\n        const textAlignRight = {\n            textAlign: 'right'\n        };\n        const minWidth = {\n            minWidth:'50px'\n        }\n        var items = this.props.data.amortization.map(function (amortizationPeriod, index) {\n            var principalPercent = formatCurrency(amortizationPeriod.principalMonth/(amortizationPeriod.principalMonth+amortizationPeriod.interestMonth)*100); \n            var interestPerecent = formatCurrency(amortizationPeriod.interestMonth/(amortizationPeriod.principalMonth+amortizationPeriod.interestMonth)*100);\n            return (\n                <tr key={index}>\n                    <td>{index + 1}</td>\n                    <td>{formatCurrency(amortizationPeriod.principalTotal)}</td>\n                    <td>{formatCurrency(amortizationPeriod.principalMonth)}</td>\n                    <td>\n                        <ProgressBar col>\n                            <ProgressBar striped variant=\"success\" now={principalPercent} label={principalPercent} key={1} />\n                            <ProgressBar variant=\"danger\" now={interestPerecent} label={interestPerecent} key={2} />\n                        </ProgressBar>\n                    </td>\n                    <td>{formatCurrency(amortizationPeriod.interestMonth)}</td>\n                    <td>{formatCurrency(amortizationPeriod.interestTotal)}</td>\n                    <td>{formatCurrency(amortizationPeriod.balance)}</td>\n                </tr>\n            );\n        });\n    return (\n            <Card.Body>\n                <Card.Title>Calculation Summary</Card.Title>\n                <Table striped bordered responsive>\n                    <thead>\n                        <tr>\n                            <th>Category</th>\n                            <th>Term</th>\n                            <th>Amortization Period</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr>\n                            <td>Number of Payments</td>\n                            <td style={textAlignRight}>{this.props.data.numberOfPaymentsTerm}</td>\n                            <td style={textAlignRight}>{this.props.data.numberOfPaymentsAmortizationPeriod}</td>\n                        </tr>\n                        <tr>\n                            <td>Mortgage Payment</td>\n                            <td style={textAlignRight}>{formatCurrency(this.props.data.mortgagePayment)}</td>\n                            <td style={textAlignRight}>{formatCurrency(this.props.data.mortgagePayment)}</td>\n                        </tr>\n                        <tr>\n                            <td>Principal Payments</td>\n                            <td style={textAlignRight}>{formatCurrency(this.props.data.principalTotalTerm)}</td>\n                            <td style={textAlignRight}>{formatCurrency(this.props.data.principalTotal)}</td>\n                        </tr>\n                        <tr>\n                            <td>Interest Payments</td>\n                            <td style={textAlignRight}>{formatCurrency(this.props.data.interestTotalTerm)}</td>\n                            <td style={textAlignRight}>{formatCurrency(this.props.data.interestTotal)}</td>\n                        </tr>\n                        <tr>\n                            <td>Balance Remaining</td>\n                            <td style={textAlignRight}>{formatCurrency(this.props.data.termBalance)}</td>\n                            <td style={textAlignRight}>{formatCurrency(this.props.data.balance)}</td>\n                        </tr>\n                        <tr>\n                            <td>Total Cost</td>\n                            <td style={textAlignRight}>{formatCurrency(this.props.data.totalCostTerm)}</td>\n                            <td style={textAlignRight}>{formatCurrency(this.props.data.totalCost)}</td>\n                        </tr>\n                    </tbody>\n                </Table>\n                <Table striped bordered responsive size=\"sm\">\n                    <thead>\n                        <th></th>\n                        <th>Principal Total</th>\n                        <th>Principal</th>\n                        <th style={minWidth}></th>\n                        <th>Interest</th>\n                        <th>Interest Total</th>\n                        <th>Mortgage</th>\n                    </thead>\n                    <tbody>\n                        {items}\n                    </tbody>\n                </Table>\n            </Card.Body>\n        );\n    }\n}\n\nexport default MortgageSummary;","import React from 'react';\n\nimport { Button, Form, InputGroup, Card, Row, Col } from 'react-bootstrap';\nimport { createBrowserHistory } from 'history';\nimport { calculateMortgage } from './MortgageCalculation';\nimport MortgageSummary from './MortgageSummary';\n\nclass MortgageCalculator extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.queryString = require('query-string');\n        this.history = createBrowserHistory();\n        const location = this.history.location;\n        const urlParameters = this.queryString.parse(location.search);\n\n        this.state = {\n            mortgageAmount: urlParameters.mortgageAmount == null ? 100000 : urlParameters.mortgageAmount,\n            interestRate: urlParameters.interestRate == null ? 3.50 : urlParameters.interestRate,\n            amortizationPeriod: urlParameters.amortizationPeriod == null ? 25 : urlParameters.amortizationPeriod,\n            paymentFrequency: urlParameters.paymentFrequency == null ? 12 : urlParameters.paymentFrequency,\n            term: urlParameters.term == null ? 5 : urlParameters.term\n        }\n\n\n        this.handleChangeMortgageAmount = this.handleChangeMortgageAmount.bind(this);\n        this.handleChangeInterestRate = this.handleChangeInterestRate.bind(this);\n        this.handleChangeAmortizationPeriod = this.handleChangeAmortizationPeriod.bind(this);\n        this.handleChangePaymentFrequency = this.handleChangePaymentFrequency.bind(this);\n        this.handleChangeTerm = this.handleChangeTerm.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n    handleChangeMortgageAmount(event) {\n        this.setState({mortgageAmount: event.target.value});\n    }\n    handleChangeInterestRate(event) {\n        this.setState({interestRate: event.target.value});\n    }\n    handleChangeAmortizationPeriod(event) {\n        this.setState({amortizationPeriod: event.target.value});\n    }\n    handleChangePaymentFrequency(event) {\n        this.setState({paymentFrequency: event.target.value});\n    }\n    handleChangeTerm(event) {\n        this.setState({term: event.target.value});\n    }\n    handleSubmit(event) {\n        this.history.push({\n            pathname: this.history.location.pathname,\n            search: '?' + this.queryString.stringify(this.state)\n          });\n        event.preventDefault();\n    }\n    render () {\n        var mortgage = calculateMortgage(this.state.mortgageAmount,this.state.interestRate,this.state.paymentFrequency,this.state.amortizationPeriod,this.state.term);\n        return (\n            <Card>\n                <Card.Body>\n                    <Card.Title>Mortgage Calculator</Card.Title>\n                    <Form onSubmit={this.handleSubmit}>\n                        <Form.Group as={Row} controlId=\"formGridMortgageAmount\">\n                            <Form.Label column sm={6}>Amount</Form.Label>\n                            <Col sm={6}>\n                                <InputGroup>\n                                    <InputGroup.Prepend>\n                                        <InputGroup.Text>$</InputGroup.Text>\n                                    </InputGroup.Prepend>\n                                    <Form.Control type=\"number\" value={this.state.mortgageAmount} onChange={this.handleChangeMortgageAmount}/>\n                                </InputGroup>\n                            </Col>\n                        </Form.Group>\n                        <Form.Group as={Row} controlId=\"formGridInterestRate\">\n                            <Form.Label column sm={6}>Interest Rate</Form.Label>\n                            <Col sm={6}>\n                                <InputGroup>\n                                    <Form.Control type=\"number\" step=\"0.01\" value={this.state.interestRate} onChange={this.handleChangeInterestRate}/>\n                                    <InputGroup.Append>\n                                        <InputGroup.Text>%</InputGroup.Text>\n                                    </InputGroup.Append>\n                                </InputGroup>\n                            </Col>\n                        </Form.Group>\n                        <Form.Group as={Row} controlId=\"formGridAmortizationPeriod\">\n                            <Form.Label column sm={6}>Amortization Period</Form.Label>\n                            <Col sm={6}>\n                                <InputGroup>\n                                    <Form.Control as=\"select\" value={this.state.amortizationPeriod} onChange={this.handleChangeAmortizationPeriod}>\n                                        <option>1</option>\n                                        <option>2</option>\n                                        <option>3</option>\n                                        <option>4</option>\n                                        <option>5</option>\n                                        <option>6</option>\n                                        <option>7</option>\n                                        <option>8</option>\n                                        <option>9</option>\n                                        <option>10</option>\n                                        <option>11</option>\n                                        <option>12</option>\n                                        <option>13</option>\n                                        <option>14</option>\n                                        <option>15</option>\n                                        <option>16</option>\n                                        <option>17</option>\n                                        <option>18</option>\n                                        <option>19</option>\n                                        <option>20</option>\n                                        <option>21</option>\n                                        <option>22</option>\n                                        <option>23</option>\n                                        <option>24</option>\n                                        <option>25</option>\n                                        <option>26</option>\n                                        <option>27</option>\n                                        <option>28</option>\n                                        <option>29</option>\n                                        <option>30</option>\n                                    </Form.Control>\n                                    <InputGroup.Append>\n                                        <InputGroup.Text>Year(s)</InputGroup.Text>\n                                    </InputGroup.Append>\n                                    <Form.Text>\n                                    Note: The maximum amortization period with less than a 20 percent down payment is 25 years.\n                                    </Form.Text>\n                                </InputGroup>\n                            </Col>\n                        </Form.Group>\n                        <Form.Group as={Row} controlId=\"formGridPaymentFrequency\">\n                            <Form.Label column sm={6}>Payment Frequency</Form.Label>\n                            <Col sm={6}>\n                                <Form.Control as=\"select\" value={this.state.paymentFrequency} onChange={this.handleChangePaymentFrequency}>\n                                    <option value=\"12\">Monthly</option>\n                                    <option value=\"24\">Semi-Monthly</option>\n                                    <option value=\"26\">Bi-Weekly</option>\n                                    <option value=\"52\">Weekly</option>\n                                </Form.Control>\n                            </Col>\n                        </Form.Group>\n                        <Form.Group as={Row} controlId=\"formGridTerm\">\n                            <Form.Label column sm={6}>Term</Form.Label>\n                            <Col sm={6}>\n                                <InputGroup>\n                                    <Form.Control as=\"select\" value={this.state.term} onChange={this.handleChangeTerm}>\n                                        <option>1</option>\n                                        <option>2</option>\n                                        <option>3</option>\n                                        <option>4</option>\n                                        <option>5</option>\n                                        <option>6</option>\n                                        <option>7</option>\n                                        <option>8</option>\n                                        <option>9</option>\n                                        <option>10</option>\n                                    </Form.Control>\n                                    <InputGroup.Append>\n                                        <InputGroup.Text>Year(s)</InputGroup.Text>\n                                    </InputGroup.Append>\n                                </InputGroup>\n                            </Col>\n                        </Form.Group>\n                        <Button type=\"submit\" >\n                            Create URL\n                        </Button>\n                    </Form>\n                </Card.Body>\n                <MortgageSummary data={mortgage}></MortgageSummary>\n            </Card>\n        );\n    }\n}\nexport default MortgageCalculator;","export let calculateMortgage = function(mortgageAmount, interestRate,  paymentFrequency, amortizationPeriod, term) {\n    var computedInterest = Math.pow(Math.pow((1+(interestRate/100/2)),2),(1/paymentFrequency))-1;\n    var mortgagePayment = (mortgageAmount * computedInterest) / (1- Math.pow((1+computedInterest), (-1 * amortizationPeriod *paymentFrequency)));\n    var balance = mortgageAmount;\n    var termBalance = 0;\n    var amortization = [];\n    var isTerm = true;\n    var interestTotal = 0;  \n    var principalTotal = 0; \n    var interestTotalTerm = 0;\n    var principalTotalTerm = 0;\n    \n    for (var year=1; year<=amortizationPeriod; year++) { \n        if (year > term && isTerm) {\n            isTerm = false;\n            interestTotalTerm = interestTotal;\n            principalTotalTerm = principalTotal;\n            termBalance = balance;\n        } \n        for (var month=1; month<=paymentFrequency; month++) {\n            var interestMonth = balance * computedInterest;\n            var principalMonth = mortgagePayment - interestMonth; \n            interestTotal = interestTotal + interestMonth;\n            principalTotal = principalTotal + principalMonth;\n            balance = balance - principalMonth;\n            amortization.push({principalTotal: principalTotal, interestTotal: interestTotal, principalMonth: principalMonth, interestMonth: interestMonth, balance: balance, term: term});\n        }\n    }\n    return {\n        numberOfPaymentsTerm: term * paymentFrequency,\n        numberOfPaymentsAmortizationPeriod: amortizationPeriod * paymentFrequency,\n        mortgagePayment: mortgagePayment,\n        interestTotalTerm: interestTotalTerm,\n        principalTotalTerm: principalTotalTerm,\n        interestTotal: interestTotal,\n        principalTotal: principalTotal,\n        totalCostTerm: interestTotalTerm+principalTotalTerm,\n        totalCost: interestTotal+principalTotal,\n        termBalance: termBalance,\n        balance: balance,\n        amortization: amortization\n    };\n};","import React from 'react';\nimport './App.css';\n\nimport { Navbar, Container, CardDeck } from 'react-bootstrap';\nimport MortgageCalculator from './MortgageCalculator';\n\nclass App extends React.Component{\n  render() {\n    return (\n      <div>\n          <Navbar bg=\"dark\" variant=\"dark\">\n            <Navbar.Brand href=\"/\">Mortgage Calculator</Navbar.Brand>\n          </Navbar>\n          <Container id=\"mainContainer\" fluid=\"true\">\n            <CardDeck>\n              <MortgageCalculator></MortgageCalculator>\n            </CardDeck>\n          </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}